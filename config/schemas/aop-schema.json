{
  "$id": "http://example.com/schemas/aop-schema.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Spring AOP Schema",
  "type": "object",
  "properties": {
    "beans": {
      "$ref": "#/$defs/beans"
    },
    "context": {
      "$ref": "#/$defs/context"
    },
    "aop": {
      "$ref": "#/$defs/aop"
    },
    "aspects": {
      "$ref": "#/$defs/aspects"
    },
    "schemaBasedAop": {
      "$ref": "#/$defs/schemaBasedAop"
    },
    "declaringAspect": {
      "$ref": "#/$defs/declaringAspect"
    },
    "declaringPointcut": {
      "$ref": "#/$defs/declaringPointcut"
    },
    "declaringAdvice": {
      "$ref": "#/$defs/declaringAdvice"
    },
    "adviceParameters": {
      "$ref": "#/$defs/adviceParameters"
    },
    "adviceOrdering": {
      "$ref": "#/$defs/adviceOrdering"
    },
    "aspectInstantiationModels": {
      "$ref": "#/$defs/aspectInstantiationModels"
    },
    "advisors": {
      "$ref": "#/$defs/advisors"
    },
    "mixingAspectTypes": {
      "$ref": "#/$defs/mixingAspectTypes"
    },
    "choosingAopDeclarationStyle": {
      "$ref": "#/$defs/choosingAopDeclarationStyle"
    }
  },
  "$defs": {
    "advice": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier for the advice."
        },
        "pointcut-ref": {
          "type": "string",
          "description": "Reference to a named pointcut."
        },
        "pointcut": {
          "type": "string",
          "description": "Inline pointcut expression."
        },
        "method": {
          "type": "string",
          "description": "The method providing the body of the advice."
        },
        "returning": {
          "type": "string",
          "description": "The name of the parameter to which the return value should be passed."
        },
        "throwing": {
          "type": "string",
          "description": "The name of the parameter to which the thrown exception should be passed."
        },
        "finally": {
          "type": "string",
          "description": "The method providing the body of the after (finally) advice."
        },
        "around": {
          "type": "string",
          "description": "The method providing the body of the around advice."
        },
        "arg-names": {
          "type": "string",
          "description": "Comma-delimited list of parameter names."
        },
        "before": {
          "type": "string",
          "description": "The method providing the body of the before advice."
        },
        "after": {
          "type": "string",
          "description": "The method providing the body of the after advice."
        },
        "afterReturning": {
          "type": "string",
          "description": "The method providing the body of the after returning advice."
        },
        "afterThrowing": {
          "type": "string",
          "description": "The method providing the body of the after throwing advice."
        }
      },
      "required": ["id", "method"]
    },
    "adviceOrdering": {
      "type": "object",
      "description": "Advice Ordering",
      "properties": {
        "order": {
          "type": "string",
          "description": "The order in which advice methods are declared within the enclosing <aop:aspect> element."
        },
        "precedence": {
          "type": "string",
          "description": "The precedence between aspects is determined via the order attribute in the <aop:aspect> element or by using the @Order annotation."
        }
      },
      "required": ["order", "precedence"]
    },
    "adviceParameters": {
      "type": "object",
      "description": "Advice Parameters",
      "properties": {
        "pointcut": {
          "type": "string",
          "description": "Pointcut expressions and advice kinds."
        },
        "advisor": {
          "type": "string",
          "description": "Advisor elements within <aop:config>."
        },
        "aspect": {
          "type": "string",
          "description": "Aspect elements within <aop:config>."
        },
        "arg-names": {
          "type": "string",
          "description": "Comma-delimited list of parameter names."
        }
      },
      "required": ["pointcut", "advisor", "aspect", "arg-names"]
    },
    "advisor": {
      "type": "object",
      "description": "Advisors",
      "properties": {
        "advisor": {
          "type": "object",
          "description": "The concept of 'advisors' comes from the AOP support defined in Spring and does not have a direct equivalent in AspectJ.",
          "properties": {
            "pointcut-ref": {
              "type": "string",
              "description": "Reference to a named pointcut."
            },
            "advice-ref": {
              "type": "string",
              "description": "Reference to the advice bean."
            },
            "order": {
              "type": "string",
              "description": "The order attribute to define the Ordered value of the advisor."
            }
          },
          "required": ["pointcut-ref", "advice-ref"]
        }
      },
      "required": ["advisor"]
    },
    "aop": {
      "type": "object",
      "properties": {
        "config": {
          "type": "object",
          "properties": {
            "proxy-target-class": {
              "type": "boolean",
              "description": "Enable proxying of target classes."
            }
          }
        },
        "aspectj-autoproxy": {
          "type": "object",
          "properties": {
            "proxy-target-class": {
              "type": "boolean",
              "description": "Enable proxying of target classes."
            },
            "expose-proxy": {
              "type": "boolean",
              "description": "Make the current proxy available to the AOP framework."
            }
          }
        }
      }
    },
    "aspect": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier for the aspect."
        },
        "privileged": {
          "type": "boolean",
          "description": "Indicates if the aspect is privileged."
        },
        "modifiers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Modifiers for the aspect."
        },
        "extends": {
          "type": "string",
          "description": "The class or abstract aspect that this aspect extends."
        },
        "implements": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Interfaces that this aspect implements."
        },
        "perClause": {
          "type": "string",
          "enum": [
            "pertarget",
            "perthis",
            "percflow",
            "percflowbelow",
            "pertypewithin",
            "issingleton"
          ],
          "description": "The per-clause defining the aspect instantiation model."
        },
        "body": {
          "type": "string",
          "description": "The body of the aspect."
        }
      },
      "required": ["id", "body"]
    },
    "aspectInstantiationModels": {
      "type": "object",
      "description": "Aspect Instantiation Models",
      "properties": {
        "singleton": {
          "type": "string",
          "description": "The only supported instantiation model for schema-defined aspects is the singleton model."
        }
      },
      "required": ["singleton"]
    },
    "aspects": {
      "type": "object",
      "properties": {
        "aspect": {
          "$ref": "#/$defs/aspect"
        }
      }
    },
    "bean": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier for the bean."
        },
        "class": {
          "type": "string",
          "description": "The class name of the bean."
        },
        "properties": {
          "type": "object",
          "description": "The properties to set on the bean.",
          "additionalProperties": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/$defs/bean"
              },
              {
                "type": "object",
                "properties": {
                  "static-field": {
                    "type": "string",
                    "description": "The static field to inject."
                  }
                },
                "required": ["static-field"]
              }
            ]
          }
        },
        "constructorArgs": {
          "type": "array",
          "description": "The constructor arguments for the bean.",
          "items": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/$defs/bean"
              },
              {
                "type": "object",
                "properties": {
                  "static-field": {
                    "type": "string",
                    "description": "The static field to inject."
                  }
                },
                "required": ["static-field"]
              }
            ]
          }
        },
        "propertyPath": {
          "type": "object",
          "description": "The property path to set on the bean.",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier for the property path."
            },
            "path": {
              "type": "string",
              "description": "The path to the property."
            }
          },
          "required": ["id", "path"]
        },
        "listFactory": {
          "type": "object",
          "description": "The list factory to set on the bean.",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier for the list factory."
            },
            "sourceList": {
              "type": "array",
              "description": "The source list for the values.",
              "items": {
                "type": "string"
              }
            },
            "listClass": {
              "type": "string",
              "description": "The class of the list to instantiate."
            }
          },
          "required": ["id", "sourceList"]
        },
        "mapFactory": {
          "type": "object",
          "description": "The map factory to set on the bean.",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier for the map factory."
            },
            "sourceMap": {
              "type": "object",
              "description": "The source map for the key-value pairs.",
              "additionalProperties": {
                "type": "string"
              }
            },
            "mapClass": {
              "type": "string",
              "description": "The class of the map to instantiate."
            }
          },
          "required": ["id", "sourceMap"]
        },
        "setFactory": {
          "type": "object",
          "description": "The set factory to set on the bean.",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier for the set factory."
            },
            "sourceSet": {
              "type": "array",
              "description": "The source set for the values.",
              "items": {
                "type": "string"
              }
            },
            "setClass": {
              "type": "string",
              "description": "The class of the set to instantiate."
            }
          },
          "required": ["id", "sourceSet"]
        }
      },
      "required": ["id", "class"]
    },
    "beans": {
      "type": "object",
      "properties": {
        "bean": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/bean"
          }
        }
      },
      "required": ["bean"]
    },
    "choosingAopDeclarationStyle": {
      "type": "object",
      "description": "Choosing which AOP Declaration Style to Use",
      "properties": {
        "proxyingMechanisms": {
          "type": "object",
          "properties": {
            "jdkDynamicProxies": {
              "type": "string",
              "description": "Spring AOP uses either JDK dynamic proxies or CGLIB to create the proxy for a given target object. If the target object to be proxied implements at least one interface, a JDK dynamic proxy is used."
            },
            "cglibProxies": {
              "type": "string",
              "description": "If the target object does not implement any interfaces, a CGLIB proxy is created. To force the use of CGLIB proxies, set the value of the proxy-target-class attribute of the <aop:config> element to true."
            },
            "proxyTargetClass": {
              "type": "string",
              "description": "Using proxy-target-class=\"true\" on <tx:annotation-driven/>, <aop:aspectj-autoproxy/>, or <aop:config/> elements forces the use of CGLIB proxies for all three of them."
            }
          },
          "required": ["jdkDynamicProxies", "cglibProxies", "proxyTargetClass"]
        }
      },
      "required": ["proxyingMechanisms"]
    },
    "context": {
      "type": "object",
      "properties": {
        "component-scan": {
          "$ref": "#/$defs/componentScan"
        },
        "annotation-config": {
          "type": "boolean",
          "description": "Enable annotation-driven configuration."
        },
        "property-placeholder": {
          "$ref": "#/$defs/propertyPlaceholder"
        },
        "load-time-weaver": {
          "$ref": "#/$defs/loadTimeWeaver"
        },
        "spring-configured": {
          "type": "object",
          "description": "Enable AspectJ to dependency inject domain objects with Spring."
        },
        "mbean-export": {
          "type": "object",
          "description": "Enable annotation-based MBean export."
        }
      },
      "required": ["component-scan", "annotation-config", "property-placeholder", "load-time-weaver", "spring-configured", "mbean-export"]
    },
    "declaringAdvice": {
      "type": "object",
      "description": "Declaring Advice",
      "properties": {
        "advice": {
          "$ref": "#/$defs/advice"
        }
      },
      "required": ["advice"]
    },
    "declaringAspect": {
      "type": "object",
      "description": "Declaring an Aspect",
      "properties": {
        "aspect": {
          "$ref": "#/$defs/aspect"
        },
        "bean": {
          "$ref": "#/$defs/bean"
        }
      },
      "required": ["aspect", "bean"]
    },
    "declaringPointcut": {
      "type": "object",
      "description": "Declaring a Pointcut",
      "properties": {
        "pointcut": {
          "$ref": "#/$defs/pointcut"
        }
      },
      "required": ["pointcut"]
    },
    "meta": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "The key of the metadata."
        },
        "value": {
          "type": "string",
          "description": "The value of the metadata."
        }
      },
      "required": ["key", "value"]
    },
    "mixingAspectTypes": {
      "type": "object",
      "description": "Mixing Aspect Types",
      "properties": {
        "description": {
          "type": "string",
          "description": "It is perfectly possible to mix @AspectJ style aspects by using the auto-proxying support, schema-defined <aop:aspect> aspects, <aop:advisor> declared advisors, and even proxies and interceptors in other styles in the same configuration."
        }
      },
      "required": ["description"]
    },
    "pointcut": {
      "type": "object",
      "description": "A pointcut that represents the execution of any business service in the service layer.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique identifier for the pointcut."
        },
        "expression": {
          "type": "string",
          "description": "The pointcut expression."
        }
      },
      "required": ["id", "expression"]
    },
    "schemaBasedAop": {
      "type": "object",
      "description": "Schema-based AOP Support",
      "properties": {
        "config": {
          "type": "object",
          "description": "Within your Spring configurations, all aspect and advisor elements must be placed within an <aop:config> element.",
          "properties": {
            "pointcut": {
              "type": "string",
              "description": "Pointcut expressions and advice kinds."
            },
            "advisor": {
              "type": "string",
              "description": "Advisor elements within <aop:config>."
            },
            "aspect": {
              "type": "string",
              "description": "Aspect elements within <aop:config>."
            }
          },
          "required": ["pointcut", "advisor", "aspect"]
        }
      },
      "required": ["config"]
    }
  }
}
